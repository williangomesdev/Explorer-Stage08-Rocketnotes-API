O que é uma API?
Prato = Pedido 
Cliente = Cliente/Usuário = Site/ Mobile
Garçom = API = Node.js Backend
Cozinha = Servidor

API = application programming interface

interface de comunicação que um sistema oferece para que outros acessem suas funções

NodeJS
Linguagem = javascript

Ambiente que executa javascript fora de um navegador
Scripts, criação de API

Onde pode ser usado
Backend
Frontend
Micro services
API
    Web
    Desktop
    Mobile
Scripts e Automação
I.A
Machine Learning

Node.js Foundation
    IBM
    Microsoft
    PayPal

Rápido
Escalável
Aplicações de ponta JS everywhere
Ecossistema gigante
Amplamente utilizada

v8 engine
Interpretador javascript  = criado pelo google
desenvolvido em C++ aumenta performance do javascript

Funcionamento do node

Ação => Request =>(Event Loop) Registra Callback => Call stack
Ação <= Request <=(Event Loop) Registra Callback <= Call stack

Request = email, senha
Event Loop = controla entradas e saídas, single thread, non-blocking I/O
Call stack = pilha de funções, assíncrona sai quem executar primeiro

express 
framework para lhe dar com requisições html

Rota = caminho site até servidor

Site = http://meuservidor.com =  Servidor

Verbos HTTP
GET = leitura
POST = criação
PUT = atualização
DELETE = deletar
PATCH = atualização parcial

GET

app.get("/", (request, response) => {
  response.send("Olá mundo!");
});

Route params = obrigatórios

- usado para dados mais simples como id

app.get("/message/:id/:user", (request, response) => {
  const { id, user } = request.params;

  response.send(`id da mensagem: ${id}.
  Para o usuário ${user}`);
});

Query Params = opcionais

//GET = pegar resposta/Query params
localhos:3333/users?page=5&limit=10


app.get("/users", (request, response) => {
  const { page, limit } = request.query;
  response.send(`Página:${page}.
  Mostrar:${limit}`);


Body Params

const { request } = require("express");
const express = require("express");
const app = express();
//Informar qual o formato que o servidor enviará os dados
app.use(express.json());

//POST = criação, com envio de dados
app.post("/users", (request, response) => {
  const { name, email, password } = request.body;
  /* response.send(`Usuário:${name}, Email:${email}, Password:${password}`); */

  //Responder como json
  response.json({ name, email, password });
});

const PORT = 3333;
app.listen(PORT, () => console.log(`Server is running on port ${PORT}`));

Estruturas de projeto
/src = arquivos da palicação
server.js = servidors
/routes = rotas da aplicação
/controllers = parte responsavel por processar as requisições da nossa aplicação

HTTP Codes
1XX = infomrativo
2XX = Sucesso
3XX = Redirecionamento
4XX = Erro do cliente
5XX = erro do servidor

Middleware = acessa a requisição antes do destino, uma funcionalidade que tem acesso de requisição e resposta, e aproxima funçãoi de middleware no ciclo solicitação-resposta do aplicativo


Site => Request =>(Middleware)=> newProduct
		
Middleware pode

Executar qualquer código
Fazer mudanças nos objetos de solicitação e resposta
Encerrar o ciclo de solicitação-resposta
Chamar o proximo middleware na pilha

Middleware para cadastro de produto
cadastrar produto somente se for um usar admin 

//Middleware
function myMiddleware(request, response, next) {
  console.log("Você passou pelo middleware!");

  //verificar se a propriedade de administrador do site é verdadeiro para o usuário
  if (!request.body.isAdmin) {
    return response.json({ message: "user unauthorized" });
  }

  //Chama o destino
  next();
}


/utils =


